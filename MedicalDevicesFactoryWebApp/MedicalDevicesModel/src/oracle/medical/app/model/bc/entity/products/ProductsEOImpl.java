package oracle.medical.app.model.bc.entity.products;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jul 12 16:42:01 EET 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProductsEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ProductId,
        ProductCode,
        ProductName,
        Quantity,
        CriticalLimit,
        Price,
        Date,
        Active,
        Image,
        Addnew,
        ProductAddition,
        ProductDiscount;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int PRODUCTID = AttributesEnum.ProductId.index();
    public static final int PRODUCTCODE = AttributesEnum.ProductCode.index();
    public static final int PRODUCTNAME = AttributesEnum.ProductName.index();
    public static final int QUANTITY = AttributesEnum.Quantity.index();
    public static final int CRITICALLIMIT = AttributesEnum.CriticalLimit.index();
    public static final int PRICE = AttributesEnum.Price.index();
    public static final int DATE = AttributesEnum.Date.index();
    public static final int ACTIVE = AttributesEnum.Active.index();
    public static final int IMAGE = AttributesEnum.Image.index();
    public static final int ADDNEW = AttributesEnum.Addnew.index();
    public static final int PRODUCTADDITION = AttributesEnum.ProductAddition.index();
    public static final int PRODUCTDISCOUNT = AttributesEnum.ProductDiscount.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ProductsEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("oracle.medical.app.model.bc.entity.products.ProductsEO");
    }


    /**
     * Gets the attribute value for ProductId, using the alias name ProductId.
     * @return the value of ProductId
     */
    public Number getProductId() {
        return (Number) getAttributeInternal(PRODUCTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProductId.
     * @param value value to set the ProductId
     */
    public void setProductId(Number value) {
        setAttributeInternal(PRODUCTID, value);
    }

    /**
     * Gets the attribute value for ProductCode, using the alias name ProductCode.
     * @return the value of ProductCode
     */
    public String getProductCode() {
        return (String) getAttributeInternal(PRODUCTCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProductCode.
     * @param value value to set the ProductCode
     */
    public void setProductCode(String value) {
        setAttributeInternal(PRODUCTCODE, value);
    }

    /**
     * Gets the attribute value for ProductName, using the alias name ProductName.
     * @return the value of ProductName
     */
    public String getProductName() {
        return (String) getAttributeInternal(PRODUCTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProductName.
     * @param value value to set the ProductName
     */
    public void setProductName(String value) {
        setAttributeInternal(PRODUCTNAME, value);
    }

    /**
     * Gets the attribute value for Quantity, using the alias name Quantity.
     * @return the value of Quantity
     */
    public Number getQuantity() {
        return (Number) getAttributeInternal(QUANTITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Quantity.
     * @param value value to set the Quantity
     */
    public void setQuantity(Number value) {
        setAttributeInternal(QUANTITY, value);
    }

    /**
     * Gets the attribute value for CriticalLimit, using the alias name CriticalLimit.
     * @return the value of CriticalLimit
     */
    public Number getCriticalLimit() {
        return (Number) getAttributeInternal(CRITICALLIMIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for CriticalLimit.
     * @param value value to set the CriticalLimit
     */
    public void setCriticalLimit(Number value) {
        setAttributeInternal(CRITICALLIMIT, value);
    }

    /**
     * Gets the attribute value for Price, using the alias name Price.
     * @return the value of Price
     */
    public Number getPrice() {
        return (Number) getAttributeInternal(PRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Price.
     * @param value value to set the Price
     */
    public void setPrice(Number value) {
        setAttributeInternal(PRICE, value);
    }

    /**
     * Gets the attribute value for Date, using the alias name Date.
     * @return the value of Date
     */
    public Date getDate() {
        return (Date) getAttributeInternal(DATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Date.
     * @param value value to set the Date
     */
    public void setDate(Date value) {
        setAttributeInternal(DATE, value);
    }

    /**
     * Gets the attribute value for Active, using the alias name Active.
     * @return the value of Active
     */
    public String getActive() {
        return (String) getAttributeInternal(ACTIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Active.
     * @param value value to set the Active
     */
    public void setActive(String value) {
        setAttributeInternal(ACTIVE, value);
    }

    /**
     * Gets the attribute value for Image, using the alias name Image.
     * @return the value of Image
     */
    public BlobDomain getImage() {
        return (BlobDomain) getAttributeInternal(IMAGE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Image.
     * @param value value to set the Image
     */
    public void setImage(BlobDomain value) {
        setAttributeInternal(IMAGE, value);
    }

    /**
     * Gets the attribute value for Addnew, using the alias name Addnew.
     * @return the value of Addnew
     */
    public Number getAddnew() {
        return (Number) getAttributeInternal(ADDNEW);
    }

    /**
     * Sets <code>value</code> as the attribute value for Addnew.
     * @param value value to set the Addnew
     */
    public void setAddnew(Number value) {
        setAttributeInternal(ADDNEW, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getProductAddition() {
        return (RowIterator) getAttributeInternal(PRODUCTADDITION);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getProductDiscount() {
        return (RowIterator) getAttributeInternal(PRODUCTDISCOUNT);
    }


    /**
     * @param productId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number productId) {
        return new Key(new Object[] { productId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_INSERT) {
            SequenceImpl seq = new SequenceImpl("PRODUCTS_SEQ", this.getDBTransaction());
            Number product_id = seq.getSequenceNumber();
            this.setProductId(product_id);
        }
        super.doDML(operation, e);
    }
}

