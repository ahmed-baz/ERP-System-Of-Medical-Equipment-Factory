package oracle.medical.app.model.bc.module;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.medical.app.model.bc.module.common.ProductsAppModuleAM;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Jul 14 22:26:22 EET 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProductsAppModuleAMImpl extends ApplicationModuleImpl implements ProductsAppModuleAM {
    /**
     * This is the default constructor (do not remove).
     */
    public ProductsAppModuleAMImpl() {
    }

    /**
     * Container's getter for MainProducts1.
     * @return MainProducts1
     */
    public ViewObjectImpl getMainProducts1() {
        return (ViewObjectImpl) findViewObject("MainProducts1");
    }

    /**
     * Container's getter for SearchProducts1.
     * @return SearchProducts1
     */
    public ViewObjectImpl getSearchProducts1() {
        return (ViewObjectImpl) findViewObject("SearchProducts1");
    }

    /**
     * Container's getter for WaitingProducts1.
     * @return WaitingProducts1
     */
    public ViewObjectImpl getWaitingProducts1() {
        return (ViewObjectImpl) findViewObject("WaitingProducts1");
    }

    /**
     * Container's getter for NewProduct1.
     * @return NewProduct1
     */
    public ViewObjectImpl getNewProduct1() {
        return (ViewObjectImpl) findViewObject("NewProduct1");
    }

    public void setActiveProducts() {

        ViewObjectImpl productsVO = getMainProducts1();
        ViewCriteria productsVC = productsVO.createViewCriteria();
        ViewCriteriaRow vcRow1 = productsVC.createViewCriteriaRow();
        vcRow1.setAttribute("Active", "Y");
        productsVC.addRow(vcRow1);
        productsVO.applyViewCriteria(productsVC);
        productsVO.executeQuery();
    }


    public void setWaitingProducts() {
        ViewObjectImpl vo = getWaitingProducts1();
        ViewCriteria vc = vo.getViewCriteria("WaitingProductsVOCriteria");
        vo.applyViewCriteria(vc);
        vo.executeQuery();
    }

    public void deleteChild(Number productId) {

        ViewObjectImpl productsDiscountVO = getProductDiscount1();
        ViewCriteria productDiscountVC = productsDiscountVO.createViewCriteria();
        ViewCriteriaRow vcRow1 = productDiscountVC.createViewCriteriaRow();
        vcRow1.setAttribute("ProductId", productId);
        productDiscountVC.addRow(vcRow1);
        productsDiscountVO.applyViewCriteria(productDiscountVC);
        productsDiscountVO.executeQuery();

        RowSetIterator productIter1 = productsDiscountVO.createRowSetIterator(null);
        while (productIter1.hasNext()) { // User Found ok
            // Retrieve Needed Data to be put on Session Scope
            Row childRow = productIter1.next();
            childRow.remove();
            this.getDBTransaction().commit();
        }

        ViewObjectImpl productsAddVO = getProductAddition1();
        ViewCriteria productAddVC = productsAddVO.createViewCriteria();
        ViewCriteriaRow vcRow2 = productAddVC.createViewCriteriaRow();
        vcRow2.setAttribute("ProductId", productId);
        productAddVC.addRow(vcRow2);
        productsAddVO.applyViewCriteria(productAddVC);
        productsAddVO.executeQuery();

        RowSetIterator productIter2 = productsAddVO.createRowSetIterator(null);
        while (productIter2.hasNext()) { 
            
            Row childRow = productIter2.next();
            childRow.remove();
            this.getDBTransaction().commit();
        }


        this.getDBTransaction().commit();
        deleteReport(productId);
        
        /* ViewObjectImpl vo1 = getProductDiscount2();
        ViewCriteria vc1 = vo1.createViewCriteria();
        ViewCriteriaRow row1 = vc1.createViewCriteriaRow();
        row1.setAttribute("Accepted", "N");
        vc1.addRow(row1);
        vo1.applyViewCriteria(vc1);
        vo1.executeQuery();
        
        ViewObjectImpl vo2 = getProductDiscountReport2();
        ViewCriteria vc2 = vo2.createViewCriteria();
        ViewCriteriaRow row2 = vc2.createViewCriteriaRow();
        vcRow2.setAttribute("Accepted", "Y");
        vc2.addRow(vcRow2);
        vo2.applyViewCriteria(vc2);
        vo2.executeQuery();
        
        ViewObjectImpl vo3 = getProductAddition2();
        ViewCriteria vc3 = vo3.createViewCriteria();
        ViewCriteriaRow row3 = vc3.createViewCriteriaRow();
        row3.setAttribute("Accepted", "N");
        vc3.addRow(row3);
        vo3.applyViewCriteria(vc3);
        vo3.executeQuery();
        
        ViewObjectImpl vo4 = getProductAdditionReport2();
        ViewCriteria vc4 = vo4.createViewCriteria();
        ViewCriteriaRow row4 = vc4.createViewCriteriaRow();
        row4.setAttribute("Accepted", "Y");
        vc4.addRow(row4);
        vo4.applyViewCriteria(vc4);
        vo4.executeQuery(); */

    }


    /**
     * Container's getter for ProductDiscount1.
     * @return ProductDiscount1
     */
    public ViewObjectImpl getProductDiscount1() {
        return (ViewObjectImpl) findViewObject("ProductDiscount1");
    }

    /**
     * Container's getter for ProductDiscountVuLink1.
     * @return ProductDiscountVuLink1
     */
    public ViewLinkImpl getProductDiscountVuLink1() {
        return (ViewLinkImpl) findViewLink("ProductDiscountVuLink1");
    }

    /**
     * Container's getter for ProductAddition1.
     * @return ProductAddition1
     */
    public ViewObjectImpl getProductAddition1() {
        return (ViewObjectImpl) findViewObject("ProductAddition1");
    }

    /**
     * Container's getter for ProductAdditionVuLink1.
     * @return ProductAdditionVuLink1
     */
    public ViewLinkImpl getProductAdditionVuLink1() {
        return (ViewLinkImpl) findViewLink("ProductAdditionVuLink1");
    }


    public void deleteRequests(Number productId) {
        ViewObjectImpl productsDiscountVO = getProductDiscount1();
        ViewCriteria productDiscountVC = productsDiscountVO.createViewCriteria();
        ViewCriteriaRow vcRow1 = productDiscountVC.createViewCriteriaRow();
        vcRow1.setAttribute("ProductId", productId);
        vcRow1.setAttribute("Accepted", "N");
        productDiscountVC.addRow(vcRow1);
        productsDiscountVO.applyViewCriteria(productDiscountVC);
        productsDiscountVO.executeQuery();


        RowSetIterator productIter1 = productsDiscountVO.createRowSetIterator(null);
        while (productIter1.hasNext()) { // User Found ok
            // Retrieve Needed Data to be put on Session Scope
            Row childRow = productIter1.next();
            childRow.remove();
            this.getDBTransaction().commit();
        }


        ViewObjectImpl productsAddVO = getProductAddition1();
        ViewCriteria productAddVC = productsAddVO.createViewCriteria();
        ViewCriteriaRow vcRow2 = productAddVC.createViewCriteriaRow();
        vcRow2.setAttribute("ProductId", productId);
        vcRow2.setAttribute("Accepted", "N");
        productAddVC.addRow(vcRow2);
        productsAddVO.applyViewCriteria(productAddVC);
        productsAddVO.executeQuery();


        RowSetIterator productIter2 = productsAddVO.createRowSetIterator(null);
        while (productIter2.hasNext()) { // User Found ok
            // Retrieve Needed Data to be put on Session Scope
            Row childRow = productIter2.next();
            childRow.remove();
            this.getDBTransaction().commit();
        }


        this.getDBTransaction().commit();
    }

    /**
     * Container's getter for ProductAddition2.
     * @return ProductAddition2
     */
    public ViewObjectImpl getProductAddition2() {
        return (ViewObjectImpl) findViewObject("ProductAddition2");
    }

    /**
     * Container's getter for ProductDiscount2.
     * @return ProductDiscount2
     */
    public ViewObjectImpl getProductDiscount2() {
        return (ViewObjectImpl) findViewObject("ProductDiscount2");
    }


    public void approveAddRequests(Number requestId, Number productId, Number quantity) {
        System.out.println("Hello World From Approve Add Request");
        ViewObjectImpl productAddVO = getProductAddition2();
        ViewCriteria productAddVC = productAddVO.createViewCriteria();
        ViewCriteriaRow vcAddRow = productAddVC.createViewCriteriaRow();
        vcAddRow.setAttribute("ProductAddId", requestId);
        productAddVC.addRow(vcAddRow);
        productAddVO.applyViewCriteria(productAddVC);
        productAddVO.executeQuery();

        if (productAddVO.getRowCount() > 0) {
            RowSetIterator productAddIter = productAddVO.createRowSetIterator(null);
            Row row = productAddIter.next();
            row.setAttribute("Accepted", "Y");
            this.getDBTransaction().commit();
        }
        addQuantity(productId, quantity);

        ViewObjectImpl vo = getMainProducts1();
        ViewCriteria vc = vo.getViewCriteria("ActvieProductsVOCriteria");
        vo.applyViewCriteria(vc);
        vo.executeQuery();


    }

    public void addQuantity(Number productId, Number quantity) {
        ViewObjectImpl productAddVO = getMainProducts1();
        ViewCriteria productAddVC = productAddVO.createViewCriteria();
        ViewCriteriaRow vcAddRow = productAddVC.createViewCriteriaRow();
        vcAddRow.setAttribute("ProductId", productId);
        productAddVC.addRow(vcAddRow);
        productAddVO.applyViewCriteria(productAddVC);
        productAddVO.executeQuery();


        if (productAddVO.getRowCount() > 0) {
            RowSetIterator productAddIter = productAddVO.createRowSetIterator(null);
            Row row = productAddIter.next();
            Number mainQuantity = (Number) row.getAttribute("Quantity");
            Number newQuantity = mainQuantity.add(quantity);
            row.setAttribute("Quantity", newQuantity);
            this.getDBTransaction().commit();
        }
        this.getDBTransaction().commit();
    }

    public void nonAcceptedAddRequests() {
        ViewObjectImpl productAddRequestVO = getProductAddition2();
        ViewCriteria productAddRequestVC = productAddRequestVO.createViewCriteria();
        ViewCriteriaRow vcRow = productAddRequestVC.createViewCriteriaRow();
        vcRow.setAttribute("Accepted", "N");
        productAddRequestVC.addRow(vcRow);
        productAddRequestVO.applyViewCriteria(productAddRequestVC);
        productAddRequestVO.executeQuery();
    }

    public void nonAcceptedDiscountRequests() {
        ViewObjectImpl productDiscountRequestVO = getProductDiscount2();
        ViewCriteria productDiscountRequestVC = productDiscountRequestVO.createViewCriteria();
        ViewCriteriaRow vcRow = productDiscountRequestVC.createViewCriteriaRow();
        vcRow.setAttribute("Accepted", "N");
        productDiscountRequestVC.addRow(vcRow);
        productDiscountRequestVO.applyViewCriteria(productDiscountRequestVC);
        productDiscountRequestVO.executeQuery();
    }


    /* public Boolean discountAllowed(Number productId, Number quantity) {
        boolean allowed = false;
        ViewObjectImpl VO = getMainProducts1();
        ViewCriteria VC = VO.createViewCriteria();
        ViewCriteriaRow vcAddRow = VC.createViewCriteriaRow();
        vcAddRow.setAttribute("ProductId", productId);
        VC.addRow(vcAddRow);
        VO.applyViewCriteria(VC);
        VO.executeQuery();

        RowSetIterator Iter = VO.createRowSetIterator(null);
        while (Iter.hasNext()) {
            Row row = Iter.next();
            Number mainQuantity = (Number) row.getAttribute("Quantity");
            Number result = (Number) mainQuantity.sub(quantity);
            if (mainQuantity.getValue() >= result.getValue()) {
                System.out.println("allowed");
                allowed = true;
            }
            System.out.println(mainQuantity);
            System.out.println(quantity);
            System.out.println(result);

        }
        return allowed;
    } */


    public void discountQuantity(Number product, Number quantity) {
        ViewObjectImpl VO = getMainProducts1();
        ViewCriteria VC = VO.createViewCriteria();
        ViewCriteriaRow vcAddRow = VC.createViewCriteriaRow();
        vcAddRow.setAttribute("ProductId", product);
        VC.addRow(vcAddRow);
        VO.applyViewCriteria(VC);
        VO.executeQuery();

        RowSetIterator iter = VO.createRowSetIterator(null);
        while (iter.hasNext()) {
            Row row = iter.next();
            Number mainQuantity = (Number) row.getAttribute("Quantity");
            Number criticalLimit = (Number) row.getAttribute("CriticalLimit");
            row.setAttribute("Addnew", 0);
            if (quantity.compareTo(mainQuantity.sub(criticalLimit)) <= 0) {
                Number newQuantity = mainQuantity.subtract(quantity);
                row.setAttribute("Quantity", newQuantity);
                this.getDBTransaction().commit();
            }

        }
    }


    public void approveDiscountRequests(Number requestId, Number productId, Number quantity) {
        ViewObjectImpl VO = getProductDiscount2();
        ViewCriteria VC = VO.createViewCriteria();
        ViewCriteriaRow vcAddRow = VC.createViewCriteriaRow();
        vcAddRow.setAttribute("ProductDiscountId", requestId);
        VC.addRow(vcAddRow);
        VO.applyViewCriteria(VC);
        VO.executeQuery();
        RowSetIterator Iter = VO.createRowSetIterator(null);
        while (Iter.hasNext()) {

            Row row = Iter.next();
            row.setAttribute("Accepted", "Y");
            this.getDBTransaction().commit();
        }
        discountQuantity(productId, quantity);
        this.getDBTransaction().commit();


        ViewObjectImpl productDiscountVO = getProductDiscount2();
        ViewCriteria productDiscountVC = productDiscountVO.createViewCriteria();
        ViewCriteriaRow vcRow = productDiscountVC.createViewCriteriaRow();
        vcRow.setAttribute("Accepted", "N");
        productDiscountVC.addRow(vcRow);
        productDiscountVO.applyViewCriteria(productDiscountVC);
        productDiscountVO.executeQuery();
    }


    public Boolean discountAllowed(Number productId, Number quantity) {
        boolean allowed = false;
        ViewObjectImpl productVO = getMainProducts1();
        ViewCriteria productVC = productVO.createViewCriteria();
        ViewCriteriaRow vcAddRow = productVC.createViewCriteriaRow();
        vcAddRow.setAttribute("ProductId", productId);
        productVC.addRow(vcAddRow);
        productVO.applyViewCriteria(productVC);
        productVO.executeQuery();

        RowSetIterator iter = productVO.createRowSetIterator(null);
        while (iter.hasNext()) {
            Row row = iter.next();
            Number mainQuantity = (Number) row.getAttribute("Quantity");
            Number criticalLimit = (Number) row.getAttribute("CriticalLimit");
            if (quantity.compareTo(mainQuantity.sub(criticalLimit)) <= 0) {
                allowed = true;
            }

        }
        return allowed;
    }

    public void returnAddNewAttrDefault(Number productId) {
        ViewObjectImpl productVO = getMainProducts1();
        ViewCriteria productVC = productVO.createViewCriteria();
        ViewCriteriaRow vcAddRow = productVC.createViewCriteriaRow();
        vcAddRow.setAttribute("ProductId", productId);
        productVC.addRow(vcAddRow);
        productVO.applyViewCriteria(productVC);
        productVO.executeQuery();

        RowSetIterator iter = productVO.createRowSetIterator(null);
        while (iter.hasNext()) {
            Row row = iter.next();
            row.setAttribute("Addnew", 0);
            this.getDBTransaction().commit();

        }
        this.getDBTransaction().commit();
    }

    public void setMainActiveProduct() {
        ViewObjectImpl productsVO = getMainProducts1();
        productsVO.setWhereClause("ACTIVE = " + "'Y'");
        productsVO.executeQuery();
    }

    /**
     * Container's getter for ProductAdditionReport2.
     * @return ProductAdditionReport2
     */
    public ViewObjectImpl getProductAdditionReport2() {
        return (ViewObjectImpl) findViewObject("ProductAdditionReport2");
    }

    /**
     * Container's getter for ProductDiscountReport2.
     * @return ProductDiscountReport2
     */
    public ViewObjectImpl getProductDiscountReport2() {
        return (ViewObjectImpl) findViewObject("ProductDiscountReport2");
    }

    public void filterAddQuantity() {
        ViewObjectImpl productVO = getProductAdditionReport2();
        ViewCriteria VC = productVO.createViewCriteria();
        ViewCriteriaRow vcRow = VC.createViewCriteriaRow();
        vcRow.setAttribute("Accepted", "N");
        VC.addRow(vcRow);
        productVO.applyViewCriteria(VC);
        productVO.executeQuery();
    }


    public void filterDiscountQuantity() {
        ViewObjectImpl productVO = getProductDiscount2();
        ViewCriteria VC = productVO.createViewCriteria();
        ViewCriteriaRow vcRow = VC.createViewCriteriaRow();
        vcRow.setAttribute("Accepted", "N");
        VC.addRow(vcRow);
        productVO.applyViewCriteria(VC);
        productVO.executeQuery();
    }


    public void deleteReport(Number productId) {

        ViewObjectImpl productsDiscountVO = getProductDiscountReport2();
        ViewCriteria productDiscountVC = productsDiscountVO.createViewCriteria();
        ViewCriteriaRow vcRow1 = productDiscountVC.createViewCriteriaRow();
        vcRow1.setAttribute("ProductId", productId);
        productDiscountVC.addRow(vcRow1);
        productsDiscountVO.applyViewCriteria(productDiscountVC);
        productsDiscountVO.executeQuery();

        RowSetIterator productIter1 = productsDiscountVO.createRowSetIterator(null);
        while (productIter1.hasNext()) { // User Found ok
            // Retrieve Needed Data to be put on Session Scope
            Row childRow = productIter1.next();
            childRow.remove();
            this.getDBTransaction().commit();
        }

        ViewObjectImpl productsAddVO = getProductAdditionReport2();
        ViewCriteria productAddVC = productsAddVO.createViewCriteria();
        ViewCriteriaRow vcRow2 = productAddVC.createViewCriteriaRow();
        vcRow2.setAttribute("ProductId", productId);
        productAddVC.addRow(vcRow2);
        productsAddVO.applyViewCriteria(productAddVC);
        productsAddVO.executeQuery();

        RowSetIterator productIter2 = productsAddVO.createRowSetIterator(null);
        while (productIter2.hasNext()) { // User Found ok
            // Retrieve Needed Data to be put on Session Scope
            Row childRow = productIter2.next();
            childRow.remove();
            this.getDBTransaction().commit();
        }


        this.getDBTransaction().commit();

    }

}

