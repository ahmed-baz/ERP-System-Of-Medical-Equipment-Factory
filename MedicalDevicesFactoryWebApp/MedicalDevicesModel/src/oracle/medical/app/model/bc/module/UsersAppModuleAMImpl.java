package oracle.medical.app.model.bc.module;

import java.io.IOException;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.domain.Number;

import oracle.medical.app.model.bc.module.common.UsersAppModuleAM;
import oracle.medical.app.model.classes.Users;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Mar 08 18:50:00 EET 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class UsersAppModuleAMImpl extends ApplicationModuleImpl implements UsersAppModuleAM {
    /**
     * This is the default constructor (do not remove).
     */
    public UsersAppModuleAMImpl() {
    }

    /**
     * Container's getter for MilitaryRanks1.
     * @return MilitaryRanks1
     */
    public ViewObjectImpl getMilitaryRanks1() {
        return (ViewObjectImpl) findViewObject("MilitaryRanks1");
    }

    /**
     * Container's getter for Roles1.
     * @return Roles1
     */
    public ViewObjectImpl getRoles1() {
        return (ViewObjectImpl) findViewObject("Roles1");
    }

    /**
     * Container's getter for Users1.
     * @return Users1
     */
    public ViewObjectImpl getUsers1() {
        return (ViewObjectImpl) findViewObject("Users1");
    }

    /**
     * Container's getter for Users2.
     * @return Users2
     */
    public ViewObjectImpl getUsers2() {
        return (ViewObjectImpl) findViewObject("Users2");
    }

    /**
     * Container's getter for Users3.
     * @return Users3
     */
    public ViewObjectImpl getUsers3() {
        return (ViewObjectImpl) findViewObject("Users3");
    }

    /**
     * Container's getter for UsersRolesVuLink1.
     * @return UsersRolesVuLink1
     */
    public ViewLinkImpl getUsersRolesVuLink1() {
        return (ViewLinkImpl) findViewLink("UsersRolesVuLink1");
    }

    /**
     * Container's getter for UsersMilitaryRankVuLink1.
     * @return UsersMilitaryRankVuLink1
     */
    public ViewLinkImpl getUsersMilitaryRankVuLink1() {
        return (ViewLinkImpl) findViewLink("UsersMilitaryRankVuLink1");
    }

    public boolean checkLogin(String email, String password) {

        System.out.println("check Login AM Method");
        boolean userFound = false;

        ADFContext.getCurrent().getSessionScope().put("USER", null);

        if (!email.isEmpty() && !password.isEmpty()) {

            String passwordEncoded = null;
            String userEmail = email.toLowerCase();
            try {
                passwordEncoded = encrypt(password, 1);
            } catch (IOException e) {

                throw new JboException("Issue in encoding");
            }

            ViewObject usersVO = this.getUsers1().getViewObject();

            /// we need to check for user / pass using View Criteria

            ViewCriteria usersVC = usersVO.createViewCriteria();
            ViewCriteriaRow ADFUsersVCR = usersVC.createViewCriteriaRow();

            ADFUsersVCR.setAttribute("Email", userEmail);
            ADFUsersVCR.setAttribute("Password", passwordEncoded);
            ADFUsersVCR.setAttribute("Active", "Y");

            usersVC.insertRow(ADFUsersVCR);
            usersVO.applyViewCriteria(usersVC);

            usersVO.executeQuery();

            if (usersVO.getRowCount() > 0) { // User Found ok
                userFound = true;

                // Retrieve Needed Data to be put on Session Scope
                Row usersRow = usersVO.createRowSetIterator(null).next();
                Number userId = (Number) usersRow.getAttribute("UserId");
                String firstName = (String) usersRow.getAttribute("FirstName");
                String lastName = (String) usersRow.getAttribute("LastName");
                Number roleId = (Number) usersRow.getAttribute("RoleId");
                Number militaryRankId = (Number) usersRow.getAttribute("MilitaryRankId");

                String userRole = (String) getUserRole(roleId);
                String usreMilitaryRank = (String) getUserMiliteryRank(militaryRankId);

                Users users = new Users(userId, roleId, firstName, lastName, userEmail, userRole, usreMilitaryRank);
                System.out.println("First Name : " + firstName);
                System.out.println("Last Name : " + lastName);
                System.out.println("role id : " + roleId + " role Name : " + userRole);
                System.out.println("Military Rank Id : " + militaryRankId + " Military Rank : " + usreMilitaryRank);

                // put needed data on Session Scope
                ADFContext.getCurrent().getSessionScope().put("USER", users);


            }
        }

        return userFound;
    }

    public String encrypt(String value, int type) throws IOException {

        // type = 1 for encryption , 2 for decryption
        String result = null;
        if (type == 1) {
            result = new sun.misc.BASE64Encoder().encode(value.getBytes());
        } else {
            byte[] decode = new sun.misc.BASE64Decoder().decodeBuffer(value);
            result = new String(decode);
        }
        return result;
    }


    public String getUserRole(Number roleId) {
        String role = null;
        ViewObject rolesVO = this.getRoles1().getViewObject();
        ViewCriteria rolesVC = rolesVO.createViewCriteria();
        ViewCriteriaRow rolesVCR = rolesVC.createViewCriteriaRow();

        rolesVCR.setAttribute("RoleId", roleId);

        rolesVC.insertRow(rolesVCR);
        rolesVO.applyViewCriteria(rolesVC);

        rolesVO.executeQuery();

        if (rolesVO.getRowCount() > 0) { // User Found ok
            // Retrieve Needed Data to be put on Session Scope
            Row usersRow = rolesVO.createRowSetIterator(null).next();
            role = (String) usersRow.getAttribute("Role");
        }

        return role;
    }

    public String getUserMiliteryRank(Number militaryRankId) {
        String MilitaryRank = null;
        ViewObject ranksVO = this.getMilitaryRanks1().getViewObject();
        ViewCriteria ranksVC = ranksVO.createViewCriteria();
        ViewCriteriaRow rolesVCR = ranksVC.createViewCriteriaRow();

        rolesVCR.setAttribute("MilitaryRankId", militaryRankId);

        ranksVC.insertRow(rolesVCR);
        ranksVO.applyViewCriteria(ranksVC);

        ranksVO.executeQuery();

        if (ranksVO.getRowCount() > 0) { // User Found ok
            // Retrieve Needed Data to be put on Session Scope
            Row usersRow = ranksVO.createRowSetIterator(null).next();
            MilitaryRank = (String) usersRow.getAttribute("MilitaryRank");
        }

        return MilitaryRank;
    }

    public static void main(String[] args) {
        UsersAppModuleAMImpl am = new UsersAppModuleAMImpl();
        try {
            System.out.println(am.encrypt("store_admin1", 1));
        } catch (IOException e) {
        }

    }

    /**
     * Container's getter for AppUsers1.
     * @return AppUsers1
     */
    public ViewObjectImpl getAppUsers1() {
        return (ViewObjectImpl) findViewObject("AppUsers1");
    }

    /**
     * Container's getter for UserProfile1.
     * @return UserProfile1
     */
    public ViewObjectImpl getUserProfile1() {
        return (ViewObjectImpl) findViewObject("UserProfile1");
    }

    public void changePassword(String username, String newPassword) {
        String password = null;
        try {
            password = encrypt(newPassword, 1);
        } catch (IOException e) {
        }
        ViewObject vo = getUsers1();
        ViewCriteria vc = vo.createViewCriteria();
        ViewCriteriaRow vcRow = vc.createViewCriteriaRow();
        vcRow.setAttribute("Email", username);
        vc.addRow(vcRow);
        vo.applyViewCriteria(vc);
        vo.executeQuery();

        RowSetIterator iter = vo.createRowSetIterator(null);

        while (iter.hasNext()) {
            Row userRow = iter.next();
            userRow.setAttribute("Password", password);
            this.getDBTransaction().commit();
        }
        
    }

    /**
     * Container's getter for AppImages1.
     * @return AppImages1
     */
    public ViewObjectImpl getAppImages1() {
        return (ViewObjectImpl) findViewObject("AppImages1");
    }
}

