package oracle.medical.app.model.bc.entity.stores;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Mar 10 13:02:45 EET 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OresEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        OreId,
        OreCode,
        OreName,
        OresTypeId,
        Quentity,
        CriticalLimit,
        Unit,
        Price,
        Supplier,
        Date,
        BillNo,
        Active,
        Image,
        Length,
        LengthUnit,
        Width,
        WidthUnit,
        Thikness,
        ThiknessUnit,
        Addnew,
        OresAddition,
        OresDiscount;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int OREID = AttributesEnum.OreId.index();
    public static final int ORECODE = AttributesEnum.OreCode.index();
    public static final int ORENAME = AttributesEnum.OreName.index();
    public static final int ORESTYPEID = AttributesEnum.OresTypeId.index();
    public static final int QUENTITY = AttributesEnum.Quentity.index();
    public static final int CRITICALLIMIT = AttributesEnum.CriticalLimit.index();
    public static final int UNIT = AttributesEnum.Unit.index();
    public static final int PRICE = AttributesEnum.Price.index();
    public static final int SUPPLIER = AttributesEnum.Supplier.index();
    public static final int DATE = AttributesEnum.Date.index();
    public static final int BILLNO = AttributesEnum.BillNo.index();
    public static final int ACTIVE = AttributesEnum.Active.index();
    public static final int IMAGE = AttributesEnum.Image.index();
    public static final int LENGTH = AttributesEnum.Length.index();
    public static final int LENGTHUNIT = AttributesEnum.LengthUnit.index();
    public static final int WIDTH = AttributesEnum.Width.index();
    public static final int WIDTHUNIT = AttributesEnum.WidthUnit.index();
    public static final int THIKNESS = AttributesEnum.Thikness.index();
    public static final int THIKNESSUNIT = AttributesEnum.ThiknessUnit.index();
    public static final int ADDNEW = AttributesEnum.Addnew.index();
    public static final int ORESADDITION = AttributesEnum.OresAddition.index();
    public static final int ORESDISCOUNT = AttributesEnum.OresDiscount.index();

    /**
     * This is the default constructor (do not remove).
     */
    public OresEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("oracle.medical.app.model.bc.entity.stores.OresEO");
    }


    /**
     * Gets the attribute value for OreId, using the alias name OreId.
     * @return the value of OreId
     */
    public Number getOreId() {
        return (Number) getAttributeInternal(OREID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OreId.
     * @param value value to set the OreId
     */
    public void setOreId(Number value) {
        setAttributeInternal(OREID, value);
    }

    /**
     * Gets the attribute value for OreCode, using the alias name OreCode.
     * @return the value of OreCode
     */
    public String getOreCode() {
        return (String) getAttributeInternal(ORECODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for OreCode.
     * @param value value to set the OreCode
     */
    public void setOreCode(String value) {
        setAttributeInternal(ORECODE, value);
    }

    /**
     * Gets the attribute value for OreName, using the alias name OreName.
     * @return the value of OreName
     */
    public String getOreName() {
        return (String) getAttributeInternal(ORENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for OreName.
     * @param value value to set the OreName
     */
    public void setOreName(String value) {
        setAttributeInternal(ORENAME, value);
    }

    /**
     * Gets the attribute value for OresTypeId, using the alias name OresTypeId.
     * @return the value of OresTypeId
     */
    public Number getOresTypeId() {
        return (Number) getAttributeInternal(ORESTYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OresTypeId.
     * @param value value to set the OresTypeId
     */
    public void setOresTypeId(Number value) {
        setAttributeInternal(ORESTYPEID, value);
    }

    /**
     * Gets the attribute value for Quentity, using the alias name Quentity.
     * @return the value of Quentity
     */
    public Number getQuentity() {
        return (Number) getAttributeInternal(QUENTITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Quentity.
     * @param value value to set the Quentity
     */
    public void setQuentity(Number value) {
        setAttributeInternal(QUENTITY, value);
    }

    /**
     * Gets the attribute value for CriticalLimit, using the alias name CriticalLimit.
     * @return the value of CriticalLimit
     */
    public Number getCriticalLimit() {
        return (Number) getAttributeInternal(CRITICALLIMIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for CriticalLimit.
     * @param value value to set the CriticalLimit
     */
    public void setCriticalLimit(Number value) {
        setAttributeInternal(CRITICALLIMIT, value);
    }

    /**
     * Gets the attribute value for Unit, using the alias name Unit.
     * @return the value of Unit
     */
    public Number getUnit() {
        return (Number) getAttributeInternal(UNIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Unit.
     * @param value value to set the Unit
     */
    public void setUnit(Number value) {
        setAttributeInternal(UNIT, value);
    }

    /**
     * Gets the attribute value for Price, using the alias name Price.
     * @return the value of Price
     */
    public Number getPrice() {
        return (Number) getAttributeInternal(PRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Price.
     * @param value value to set the Price
     */
    public void setPrice(Number value) {
        setAttributeInternal(PRICE, value);
    }

    /**
     * Gets the attribute value for Supplier, using the alias name Supplier.
     * @return the value of Supplier
     */
    public String getSupplier() {
        return (String) getAttributeInternal(SUPPLIER);
    }

    /**
     * Sets <code>value</code> as the attribute value for Supplier.
     * @param value value to set the Supplier
     */
    public void setSupplier(String value) {
        setAttributeInternal(SUPPLIER, value);
    }

    /**
     * Gets the attribute value for Date, using the alias name Date.
     * @return the value of Date
     */
    public Date getDate() {
        return (Date) getAttributeInternal(DATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Date.
     * @param value value to set the Date
     */
    public void setDate(Date value) {
        setAttributeInternal(DATE, value);
    }

    /**
     * Gets the attribute value for BillNo, using the alias name BillNo.
     * @return the value of BillNo
     */
    public Number getBillNo() {
        return (Number) getAttributeInternal(BILLNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for BillNo.
     * @param value value to set the BillNo
     */
    public void setBillNo(Number value) {
        setAttributeInternal(BILLNO, value);
    }

    /**
     * Gets the attribute value for Active, using the alias name Active.
     * @return the value of Active
     */
    public String getActive() {
        return (String) getAttributeInternal(ACTIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Active.
     * @param value value to set the Active
     */
    public void setActive(String value) {
        setAttributeInternal(ACTIVE, value);
    }

    /**
     * Gets the attribute value for Image, using the alias name Image.
     * @return the value of Image
     */
    public BlobDomain getImage() {
        return (BlobDomain) getAttributeInternal(IMAGE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Image.
     * @param value value to set the Image
     */
    public void setImage(BlobDomain value) {
        setAttributeInternal(IMAGE, value);
    }

    /**
     * Gets the attribute value for Length, using the alias name Length.
     * @return the value of Length
     */
    public Number getLength() {
        return (Number) getAttributeInternal(LENGTH);
    }

    /**
     * Sets <code>value</code> as the attribute value for Length.
     * @param value value to set the Length
     */
    public void setLength(Number value) {
        setAttributeInternal(LENGTH, value);
    }

    /**
     * Gets the attribute value for LengthUnit, using the alias name LengthUnit.
     * @return the value of LengthUnit
     */
    public Number getLengthUnit() {
        return (Number) getAttributeInternal(LENGTHUNIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for LengthUnit.
     * @param value value to set the LengthUnit
     */
    public void setLengthUnit(Number value) {
        setAttributeInternal(LENGTHUNIT, value);
    }

    /**
     * Gets the attribute value for Width, using the alias name Width.
     * @return the value of Width
     */
    public Number getWidth() {
        return (Number) getAttributeInternal(WIDTH);
    }

    /**
     * Sets <code>value</code> as the attribute value for Width.
     * @param value value to set the Width
     */
    public void setWidth(Number value) {
        setAttributeInternal(WIDTH, value);
    }

    /**
     * Gets the attribute value for WidthUnit, using the alias name WidthUnit.
     * @return the value of WidthUnit
     */
    public Number getWidthUnit() {
        return (Number) getAttributeInternal(WIDTHUNIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for WidthUnit.
     * @param value value to set the WidthUnit
     */
    public void setWidthUnit(Number value) {
        setAttributeInternal(WIDTHUNIT, value);
    }

    /**
     * Gets the attribute value for Thikness, using the alias name Thikness.
     * @return the value of Thikness
     */
    public Number getThikness() {
        return (Number) getAttributeInternal(THIKNESS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Thikness.
     * @param value value to set the Thikness
     */
    public void setThikness(Number value) {
        setAttributeInternal(THIKNESS, value);
    }

    /**
     * Gets the attribute value for ThiknessUnit, using the alias name ThiknessUnit.
     * @return the value of ThiknessUnit
     */
    public Number getThiknessUnit() {
        return (Number) getAttributeInternal(THIKNESSUNIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ThiknessUnit.
     * @param value value to set the ThiknessUnit
     */
    public void setThiknessUnit(Number value) {
        setAttributeInternal(THIKNESSUNIT, value);
    }


    /**
     * Gets the attribute value for Addnew, using the alias name Addnew.
     * @return the value of Addnew
     */
    public Number getAddnew() {
        return (Number) getAttributeInternal(ADDNEW);
    }

    /**
     * Sets <code>value</code> as the attribute value for Addnew.
     * @param value value to set the Addnew
     */
    public void setAddnew(Number value) {
        setAttributeInternal(ADDNEW, value);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getOresAddition() {
        return (RowIterator) getAttributeInternal(ORESADDITION);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getOresDiscount() {
        return (RowIterator) getAttributeInternal(ORESDISCOUNT);
    }


    /**
     * @param oreId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number oreId) {
        return new Key(new Object[] { oreId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_INSERT) {
            SequenceImpl seq = new SequenceImpl("ORES_SEQ", this.getDBTransaction());
            Number ore_id = seq.getSequenceNumber();
            this.setOreId(ore_id);
        }
        super.doDML(operation, e);
    }
}

